/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Guis;

import CrearTablas.CrearTablaTransporte;
import Transprte.CostoMinimo;
import Transprte.Datos;
import Transprte.EsquinaNO;
import Transprte.RssFeedCellRenderer;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 * En esta clase se trabaja todo lo respectivo a la interfaz (interacción con el
 * usuario)
 *
 * @author Estaban
 */
public class GuiTransporte extends javax.swing.JFrame {
    
    public static int destinos = 0, origenes;
    public static DefaultTableModel modeloRestricciones = null;
    private final DefaultTableModel modeloSolucion = null;
    public static Datos datos[][];
    CrearTablaTransporte ct = new CrearTablaTransporte();
    EsquinaNO NO;
    CostoMinimo minimo;
    
    public static int extraRow = 0;
    public static int extraColumn = 0;
    public boolean artificialFila = false, artificialColumna = false;
    double demanda = 0;
    double oferta = 0;
    public static boolean corte = true;
    public static String repetidosNumeros;
    
    RssFeedCellRenderer Renderizar = new RssFeedCellRenderer();

    /**
     * Constructor de la case (primero en ejecutarse)
     */
    public GuiTransporte() {
        initComponents();
        jtSolucion.setDefaultRenderer(Object.class, Renderizar);
        jtSolucion.setRowHeight(50);
        jtRestricciones.setRowHeight(25);
        jTable1.setRowHeight(22);
        destinos = Integer.parseInt("" + jspDestinos.getValue());
        origenes = Integer.parseInt("" + jspOrigen.getValue());
        new CrearTablaTransporte().crearTablaRestricciones(destinos, origenes, jtRestricciones, 0);
        jFrame1.setBounds(this.getX() + (this.getWidth() / 2) - (jFrame1.getWidth() / 2),
                (this.getHeight() / 2) - (jFrame1.getHeight() / 2), jFrame1.getWidth(), jFrame1.getHeight());
        
        JTableHeader th;
        th = jtRestricciones.getTableHeader();
        
        th.setForeground(Color.red);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtRestricciones = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        info2 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel8 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jcbMeto = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jspOrigen = new javax.swing.JSpinner();
        jspDestinos = new javax.swing.JSpinner();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jckbPlanta = new javax.swing.JCheckBox();
        jckbDestino = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtSolucion = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfResultado = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jFrame1.setTitle("AgregarModelo");
        jFrame1.setMinimumSize(new java.awt.Dimension(680, 610));
        jFrame1.setResizable(false);
        jFrame1.setState(100000);
        jFrame1.getContentPane().setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modelo a resolver", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14)));
        jPanel3.setLayout(null);

        jtRestricciones.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtRestricciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Origen 1", null, null, null},
                {"Origen 2", null, null, null},
                {"Demanda", null, null, null}
            },
            new String [] {
                "", "Destino 1", "Destino 2", "Oferta"
            }
        ));
        jtRestricciones.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtRestricciones.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtRestriccionesFocusGained(evt);
            }
        });
        jtRestricciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtRestriccionesMousePressed(evt);
            }
        });
        jtRestricciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtRestriccionesKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jtRestricciones);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(16, 30, 610, 350);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/okay.png"))); // NOI18N
        jButton2.setText("Resolver");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(400, 390, 180, 40);

        info2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        info2.setOpaque(true);
        jPanel3.add(info2);
        info2.setBounds(20, 400, 290, 22);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel3.add(jSeparator4);
        jSeparator4.setBounds(330, 390, 12, 40);

        jFrame1.getContentPane().add(jPanel3);
        jPanel3.setBounds(10, 138, 650, 430);
        jPanel3.getAccessibleContext().setAccessibleName("");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jcbMeto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jcbMeto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Costo Mínimo", "Esquina Noroeste" }));
        jcbMeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMetoActionPerformed(evt);
            }
        });
        jPanel1.add(jcbMeto);

        jPanel8.add(jPanel1);
        jPanel1.setBounds(10, 10, 200, 90);

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setLayout(null);

        jspOrigen.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jspOrigen.setModel(new javax.swing.SpinnerNumberModel(2, 1, 400, 1));
        jspOrigen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jspOrigenStateChanged(evt);
            }
        });
        jPanel5.add(jspOrigen);
        jspOrigen.setBounds(80, 50, 80, 28);

        jspDestinos.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jspDestinos.setModel(new javax.swing.SpinnerNumberModel(2, 2, 350, 1));
        jPanel5.add(jspDestinos);
        jspDestinos.setBounds(80, 10, 80, 28);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3);
        jButton3.setBounds(170, 50, 60, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Origen");
        jPanel5.add(jLabel4);
        jLabel4.setBounds(10, 50, 110, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Destino");
        jPanel5.add(jLabel6);
        jLabel6.setBounds(10, 10, 130, 30);

        jPanel8.add(jPanel5);
        jPanel5.setBounds(210, 10, 250, 90);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Ficticia"));
        jPanel4.setLayout(null);

        jckbPlanta.setText("Origen");
        jckbPlanta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jckbPlantaActionPerformed(evt);
            }
        });
        jPanel4.add(jckbPlanta);
        jckbPlanta.setBounds(10, 15, 80, 30);

        jckbDestino.setText("Destino");
        jckbDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jckbDestinoActionPerformed(evt);
            }
        });
        jPanel4.add(jckbDestino);
        jckbDestino.setBounds(10, 40, 80, 30);

        jPanel8.add(jPanel4);
        jPanel4.setBounds(470, 10, 100, 80);

        jButton7.setBackground(new java.awt.Color(222, 222, 222));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/help.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton7);
        jButton7.setBounds(570, 10, 70, 80);

        jFrame1.getContentPane().add(jPanel8);
        jPanel8.setBounds(10, 10, 650, 110);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transporte ");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        jtSolucion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtSolucion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtSolucion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jtSolucion);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(320, 130, 750, 450);

        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel7.setLayout(null);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/boton-agregar.png"))); // NOI18N
        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton1);
        jButton1.setBounds(10, 0, 230, 70);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nextStep.png"))); // NOI18N
        jButton4.setText("Resolver P a P");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);
        jButton4.setBounds(490, 10, 240, 50);

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/solucion.png"))); // NOI18N
        jButton5.setText("Resolver");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton5);
        jButton5.setBounds(260, 10, 160, 50);

        getContentPane().add(jPanel7);
        jPanel7.setBounds(20, 20, 750, 70);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Z =");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 30, 30, 30);

        jtfResultado.setBackground(new java.awt.Color(255, 255, 255));
        jtfResultado.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jtfResultado.setOpaque(true);
        jPanel2.add(jtfResultado);
        jtfResultado.setBounds(40, 30, 260, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origen", "Destino", "Matriales", "Precio", "Sub Total"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(jTable1);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(10, 80, 290, 360);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 130, 310, 450);

        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 580, 310, 20);

        jLabel8.setIcon(new javax.swing.ImageIcon("C:\\Users\\hp\\OneDrive\\Documentos\\NetBeansProjects\\Mtransporte_ProyectoIO\\src\\Imagenes\\uptc.jpg")); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(jLabel8);
        jLabel8.setBounds(790, 20, 240, 70);

        jLabel3.setFont(new java.awt.Font("Dubai Light", 0, 11)); // NOI18N
        jLabel3.setText("Developers:           Yessid Esteban Duarte Prieto            /           Jimmy Alejandro Zea Gutierrez");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(450, 580, 620, 20);

        setSize(new java.awt.Dimension(1102, 650));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtRestriccionesFocusGained(FocusEvent evt) {// GEN-FIRST:event_jtRestriccionesFocusGained

    }// GEN-LAST:event_jtRestriccionesFocusGained

    private void jtRestriccionesMousePressed(MouseEvent evt) {// GEN-FIRST:event_jtRestriccionesMousePressed

    }// GEN-LAST:event_jtRestriccionesMousePressed

    /**
     *
     * @param evt. este parametro contiene eventos proporionado por el teclado
     * consume el evento si lo quee se digita por teclado no corresponde a un
     * numero
     */
    private void jtRestriccionesKeyTyped(KeyEvent evt) {// GEN-FIRST:event_jtRestriccionesKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '-' && c != 'E' && c != '.') {
            evt.consume();
        }
    }// GEN-LAST:event_jtRestriccionesKeyTyped

    /**
     *
     * @param evt evento generado al pulsar en el boton resolver (jbutton2) se
     * envia un texto al jlabel info dos indicando que se esta procesando el
     * modelo
     */
    private void jButton2MousePressed(MouseEvent evt) {// GEN-FIRST:event_jButton2MousePressed
        info2.setText(" Procesando…");
    }// GEN-LAST:event_jButton2MousePressed

    /**
     *
     * @param evt evento al elegir por cual metodo se desea solucionar el
     * problema (Esquina noroeste, costo minimo, voguel) se envia el modelo al
     * respectivo metodo de solución
     *
     */
    private void jButton2ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        boolean resp = equilibarSistema();
        if (isNumeric(jtRestricciones) && resp) {
            destinos = Integer.parseInt("" + jspDestinos.getValue());
            origenes = Integer.parseInt("" + jspOrigen.getValue());
            ct.CrearTablaSolucion(jtRestricciones, jtSolucion, extraRow, extraColumn);
            
            switch (jcbMeto.getSelectedIndex()) {
                case 1:
                    NO = new EsquinaNO();
                    NO.calcularDemandaOfretTotal(jtSolucion, 0, 0);
                    break;
                case 0:
                    minimo = new CostoMinimo();
                    break;
                
                default:
                    break;
            }
            
            jButton4.setEnabled(true);
            jButton5.setEnabled(true);
            jFrame1.setVisible(false);
            
        }
        
    }// GEN-LAST:event_jButton2ActionPerformed

//    private void jCheckBox1MousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jCheckBox1MousePressed
//        info2.setText(" Procesando…"); // TODO add your handling code here:
//    }// GEN-LAST:event_jCheckBox1MousePressed
    /**
     *
     * @param evt evento al haber algun cambio en la cantidad de origenes
     * aumenta la cantidad de filas(destinos) en la tabla
     */
    private void jspOrigenStateChanged(ChangeEvent evt) {// GEN-FIRST:event_jspOrigenStateChanged
        int fi = Integer.parseInt(jspOrigen.getValue().toString());
        info2.setText(null);
        String g[] = new String[destinos];
        if (fi > origenes) {
            for (int i = origenes + 1; i <= fi; i++) {
                g[0] = "Demanda " + i;
                modeloRestricciones.addRow(g);
                String tem;
                for (int j = 0; j < modeloRestricciones.getColumnCount(); j++) {
                    tem = "" + modeloRestricciones.getValueAt(modeloRestricciones.getRowCount() - 2, j);
                    if (!tem.equals("null")) {
                        modeloRestricciones.setValueAt(tem, modeloRestricciones.getRowCount() - 1, j);
                    }
                    modeloRestricciones.setValueAt("", modeloRestricciones.getRowCount() - 2, j);
                    
                }
                modeloRestricciones.setValueAt("Origen " + i, modeloRestricciones.getRowCount() - 2, 0);
                modeloRestricciones.setValueAt("", modeloRestricciones.getRowCount() - 1,
                        modeloRestricciones.getColumnCount() - 1);
            }
            origenes = fi;
        } else if (fi < origenes) {
            while (origenes != fi) {
                modeloRestricciones.removeRow(origenes - 1);
                origenes--;
            }
        }
    }// GEN-LAST:event_jspOrigenStateChanged

    /**
     *
     * @param evt este evento se genera al confimar la cantidad de filas y
     * columnas uqe contiene el modelo
     */
    private void jButton3ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
        destinos = Integer.parseInt("" + jspDestinos.getValue());
        origenes = Integer.parseInt("" + jspOrigen.getValue());
        new CrearTablaTransporte().crearTablaRestricciones(destinos, origenes, jtRestricciones, 0);
        jckbPlanta.setSelected(false);
        jckbDestino.setSelected(false);
        artificialColumna = false;
        artificialFila = false;
        info2.setBackground(new Color(240, 240, 240));
        info2.setText(null);
    }// GEN-LAST:event_jButton3ActionPerformed

    /**
     *
     * @param evt hace visible jframe1 en el cual se puede agregar un nuevo
     * modelo
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        jFrame1.setVisible(true);
        
    }// GEN-LAST:event_jButton1ActionPerformed

    /**
     *
     * @param evt evento a presionar boton para resolver paso a paso
     *
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        if (jcbMeto.getSelectedIndex() == 1) {
            if (NO.noroeste(jtSolucion, modeloSolucion)) {
                jLabel1.setText(" Fin del proceso");
                enviar();
                jButton4.setEnabled(false);
            }
            jtSolucion.setValueAt("", 0, 0);
        }
        if (jcbMeto.getSelectedIndex() == 0) {
            if (minimo.costoMinimo(jtSolucion)) {
                jLabel1.setText(" Fin del proceso");
                enviar();
                jButton4.setEnabled(false);
            }
            jtSolucion.setValueAt("", 0, 0);
            
        }
        
        jtfResultado.setText("" + calularTotal());
    }// GEN-LAST:event_jButton4ActionPerformed

    /**
     *
     * @param evt evento al pulsar sobre el boton resolver el modelo de una sola
     * vez se resuelve el modelo; muestra resultado final
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton5ActionPerformed
        boolean fin = false;
        corte = false;
        while (!fin) {
            if (jcbMeto.getSelectedIndex() == 1) {
                if (NO.noroeste(jtSolucion, modeloSolucion)) {
                    jLabel1.setText(" Fin del proceso");
                    enviar();
                    jButton4.setEnabled(false);
                    jButton5.setEnabled(false);
                    fin = true;
                }
            }
            if (jcbMeto.getSelectedIndex() == 0) {
                if (minimo.costoMinimo(jtSolucion)) {
                    jLabel1.setText(" Fin del proceso");
                    enviar();
                    jButton4.setEnabled(false);
                    jButton5.setEnabled(false);
                    fin = true;
                }
                jtSolucion.setValueAt("", 0, 0);
                
            }
            
        }
        jtfResultado.setText("" + calularTotal());
        
    }// GEN-LAST:event_jButton5ActionPerformed

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton2MouseReleased
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton2MouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }// GEN-LAST:event_formWindowActivated

    /**
     *
     * @param evt evento al seleccionar por cual metodo se solucionará el modelo
     */
    private void jcbMetoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jcbMetoActionPerformed
        repetidosNumeros = null;
        if (jcbMeto.getSelectedIndex() == 0 || jcbMeto.getSelectedIndex() == 1) {
            extraRow = 0;
            extraColumn = 0;
            
        } else {
            extraRow = 1;
            extraColumn = 1;
        }
        
        info2.setBackground(new Color(240, 240, 240));
        info2.setText(null);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
    }// GEN-LAST:event_jcbMetoActionPerformed

    /**
     *
     * @param evt evento tras pulsar checkbox (planta) en este metodo se agrega
     * una fila extra para poder dar solución al modelo
     */
    private void jckbPlantaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jckbPlantaActionPerformed
        info2.setBackground(new Color(240, 240, 240));
        info2.setText(null);
        if (jckbDestino.isSelected()) {
            eliminarColumna();
        }
        calcularDemandaOfretTotal(jtSolucion, 0, 0);
        
        jckbDestino.setSelected(false);
        if (!jckbPlanta.isSelected()) {
            eliminaFila();
        } else {
            agregarFila();
        }
        
    }// GEN-LAST:event_jckbPlantaActionPerformed

    /**
     *
     * @param evt evento tras pulsar checkbox (planta) en este metodo se agrega
     * una columna (destino) extra para poder dar solución al modelo
     */
    private void jckbDestinoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jckbDestinoActionPerformed
        info2.setBackground(new Color(240, 240, 240));
        info2.setText(null);
        if (jckbPlanta.isSelected()) {
            eliminaFila();
        }
        calcularDemandaOfretTotal(jtRestricciones, 0, 0);
        jckbPlanta.setSelected(false);
        if (!jckbDestino.isSelected()) {
            eliminarColumna();
        } else {
            agregarColumna();
        }
    }// GEN-LAST:event_jckbDestinoActionPerformed

    /**
     *
     * @param evt evento al pulsar el archivo de ayuda este metodo ayuda a
     * equilibrar el modelo para poder dar solución en caso de no poder
     * equilibrar el modelo se informara al usuario error
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton7ActionPerformed
        info2.setBackground(new Color(240, 240, 240));
        info2.setText(null);
        if (artificialColumna) {
            calcularDemandaOfretTotal(jtRestricciones, 0, 1);
            modeloRestricciones.setValueAt((oferta - demanda), modeloRestricciones.getRowCount() - 1,
                    modeloRestricciones.getColumnCount() - 2);
            
        } else if (artificialFila) {
            calcularDemandaOfretTotal(jtRestricciones, 1, 0);
            modeloRestricciones.setValueAt((oferta - demanda), modeloRestricciones.getRowCount() - 2,
                    modeloRestricciones.getColumnCount() - 1);
        } else {
            calcularDemandaOfretTotal(jtRestricciones, 0, 0);
        }
        
        if (oferta == demanda) {
            if (artificialFila) {
                eliminaFila();
                artificialFila = false;
                jckbPlanta.setSelected(false);
            } else if (artificialColumna) {
                eliminarColumna();
                artificialColumna = false;
                jckbDestino.setSelected(false);
            }
        } else if (oferta != demanda) {
            if (oferta > demanda && artificialFila) {
                eliminaFila();
                artificialFila = false;
                jckbPlanta.setSelected(false);
                agregarColumna();
                artificialColumna = true;
                jckbDestino.setSelected(true);
            } else if (oferta < demanda && artificialColumna) {
                eliminarColumna();
                artificialColumna = false;
                jckbDestino.setSelected(false);
                agregarFila();
                artificialFila = true;
                jckbPlanta.setSelected(true);
            }
            
        }
        if (!artificialColumna && !artificialFila) {
            if (oferta < demanda) {
                agregarFila();
                artificialFila = true;
                jckbPlanta.setSelected(true);
            } else if (oferta > demanda) {
                agregarColumna();
                artificialColumna = true;
                jckbDestino.setSelected(true);
            }
        }
        
    }// GEN-LAST:event_jButton7ActionPerformed

    
    
    /**
     * 
     * @return retorna un booleano indicando que el sistema se encuentra equilibrado
     * metodo para equlibrar el sistema
     */
    public boolean equilibarSistema() {
        info2.setBackground(new Color(253, 177, 177));
        if (artificialColumna) {
            calcularDemandaOfretTotal(jtRestricciones, 0, 1);
//           modeloRestricciones.setValueAt((oferta-demanda), modeloRestricciones.getRowCount()-1, modeloRestricciones.getColumnCount()-2);

        } else if (artificialFila) {
            calcularDemandaOfretTotal(jtRestricciones, 1, 0);
//           modeloRestricciones.setValueAt((oferta-demanda), modeloRestricciones.getRowCount()-2, modeloRestricciones.getColumnCount()-1);
        } else {
            calcularDemandaOfretTotal(jtRestricciones, 0, 0);
        }
        
        if (oferta == demanda) {
            if (artificialFila) {
                info2.setText("Planta Artificial innecesaria");
                return false;
            } else if (artificialColumna) {
                info2.setText("Destino Artificial innecesario");
                return false;
            }
        } else if (oferta != demanda) {
            if (oferta > demanda && artificialFila) {
                info2.setText("Sistema Mal equilibrado");
                return false;
            } else if (oferta < demanda && artificialColumna) {
                info2.setText("Sistema Mal equilibrado");
                return false;
            }
            
        }
        if (!artificialColumna && !artificialFila) {
            if (oferta < demanda) {
                info2.setText("La Oferta No Satisface la demanda");
                return false;
            } else if (oferta > demanda) {
                info2.setText("La Demanda No Satisface la oferta");
                return false;
            }
        }
        info2.setBackground(new Color(240, 240, 240));
        return true;
        
    }
    
    /**
     * metodo para eliminar fila
     */
    void eliminaFila() {
        artificialFila = false;
        modeloRestricciones.removeRow(modeloRestricciones.getRowCount() - 2);
    }
    
    /**
     * metodo para agregar columna
     */
    void agregarColumna() {
        artificialColumna = true;
        modeloRestricciones.addColumn("Oferta");
        renombrarColumn("Ficticio", jtRestricciones);
        trasladorDatos(jtRestricciones);
        modeloRestricciones.setValueAt((oferta - demanda), modeloRestricciones.getRowCount() - 1,
                modeloRestricciones.getColumnCount() - 2);
    }
    
    /**
     * metodo para eliminar columna
     */
    void eliminarColumna() {
        artificialColumna = false;
        String tem[][] = extrar(jtRestricciones, 1);
        new CrearTablaTransporte().crearTablaRestricciones(destinos, origenes, jtRestricciones, 0);
        for (int i = 0; i < tem.length; i++) {
            for (int j = 1; j < tem[i].length; j++) {
                modeloRestricciones.setValueAt(tem[i][j], i, j);
            }
        }
    }
    
    /**
     * metodo para agregar fila
     */
    void agregarFila() {
        artificialFila = true;
        String temp;
        modeloRestricciones.addRow(new String[]{"Demanda"});
        int p = modeloRestricciones.getRowCount();
        for (int i = 0; i < modeloRestricciones.getColumnCount(); i++) {
            temp = "" + modeloRestricciones.getValueAt(p - 2, i);
            if (String.valueOf(modeloRestricciones.getValueAt(p - 2, i)).equalsIgnoreCase("null")) {
                temp = "";
            }
            modeloRestricciones.setValueAt(temp, p - 1, i);
            if (i == 0) {
                modeloRestricciones.setValueAt("Ficticio", p - 2, i);
            } else {
                modeloRestricciones.setValueAt("0", p - 2, i);
            }
        }
        
        modeloRestricciones.setValueAt((demanda - oferta), modeloRestricciones.getRowCount() - 2,
                modeloRestricciones.getColumnCount() - 1);
    }
    
    
    /**
     * en este metodo se renomra la columna de la tabla en caso de necesitar una columan ficticia
     * @param nom nuevo nombre para la columna
     * @param t tabla a modificar nombre de columna
     */
    public void renombrarColumn(String nom, JTable t) {
        JTableHeader th = t.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(t.getColumnCount() - 2);
        tc.setHeaderValue("Ficticio");
        th.repaint();
    }
    
    
    
    public void trasladorDatos(JTable t) {
        for (int f = 0; f < t.getRowCount() - 1; f++) {
            t.setValueAt(t.getValueAt(f, t.getColumnCount() - 2), f, t.getColumnCount() - 1);
            t.setValueAt(0, f, t.getColumnCount() - 2);
        }
    }
    
    public String[][] extrar(JTable t, int c) {
        String tem[][] = new String[t.getRowCount()][t.getColumnCount() - c];
        for (int i = 0; i < t.getRowCount(); i++) {
            for (int j = 0; j < t.getColumnCount() - 2; j++) {
                if (String.valueOf(t.getValueAt(i, j)).equalsIgnoreCase("null")) {
                    tem[i][j] = "";
                } else {
                    tem[i][j] = "" + t.getValueAt(i, j);
                }
            }
        }
        int p = t.getColumnCount();
        for (int i = 0; i < t.getRowCount() - 1; i++) {
            if (String.valueOf(t.getValueAt(i, p - 1)).equalsIgnoreCase("null")) {
                tem[i][p - c - 1] = "";
            } else {
                tem[i][p - c - 1] = "" + t.getValueAt(i, p - 1);
            }
        }
        return tem;
    }
    
    /**
     * 
     * @param tableSolucion tabla de solución final
     * @param extraf si hay una fila extra (origen ficticio)
     * @param extraC si hay una columna extra (destino ficticio)
     * en este metodo se calcula la demanda y oferta total
     */
    public void calcularDemandaOfretTotal(JTable tableSolucion, int extraf, int extraC) {
        demanda = 0;
        oferta = 0;
        for (int i = 1; i < jtRestricciones.getColumnCount() - 1 - extraC; i++) {
            try {
                demanda = demanda
                        + Double.parseDouble("" + jtRestricciones.getValueAt(jtRestricciones.getRowCount() - 1, i));
            } catch (Exception r) {
            }
        }
        for (int i = 0; i < jtRestricciones.getRowCount() - 1 - extraf; i++) {
            try {
                oferta = oferta
                        + Double.parseDouble("" + jtRestricciones.getValueAt(i, jtRestricciones.getColumnCount() - 1));
            } catch (Exception e) {
            }
        }
    }

    /**
     * @param args the command line arguments
     * main
     */
    public static void main(String args[]) {
 
        GuiTransporte gui = new GuiTransporte();
        gui.setVisible(true);
    }
    
    /**
     * para validar si los datos ingresados son vaidos, es decir son todos numericos
     * @param t tabla en la cual se va validar la información ingresada
     * @return retorna un booleano con tue en caso de que todo se encuentre en numeros y false en caso de encontrar algo diferente
     */
    private boolean isNumeric(JTable t) {
        
        for (int i = 0; i < t.getRowCount(); i++) {
            for (int j = 1; j < t.getColumnCount(); j++) {
                try {
                    if (i == t.getRowCount() - 1 && j == t.getColumnCount() - 1) {
                        return true;
                    }
                    if (i == t.getRowCount() - 1 || j == t.getColumnCount() - 1) {
                        Double.parseDouble("" + t.getValueAt(i, j));
                        
                    } else if (!"-".equals("" + t.getValueAt(i, j))) {
                        Double.parseDouble("" + t.getValueAt(i, j));
                    }
                    
                } catch (NumberFormatException nfe) {
                    info2.setText("Dato Incorrecto ' " + t.getValueAt(i, j) + " '");
                    info2.setBackground(new Color(253, 177, 177));
                    return false;
                }
            }
        }
        return true;
        
    }
    
    
    
    public void enviar() {
        Object[] cabeza = {"Origen", "Destino", "Material", "Precio", "Sub Total"};
        DefaultTableModel mode = new DefaultTableModel(cabeza, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        String row[] = new String[5];
        for (int i = 0; i < datos.length; i++) {
            for (int j = 0; j < datos[0].length; j++) {
                if (datos[i][j].getCantidad() > 0D) {
                    row[0] = "" + (i + 1);
                    row[1] = "" + (j + 1);
                    row[2] = "" + datos[i][j].getCantidad();
                    row[3] = "" + datos[i][j].getPrecio();
                    row[4] = "" + datos[i][j].getCantidad() * Double.parseDouble(datos[i][j].getPrecio());
                    mode.addRow(row);
                }
            }
        }
        jTable1.setModel(mode);
    }
   
    
    /**
     * 
     * @return  retorna un double con el total
     */
    double calularTotal() {
        double total = 0;
        for (int i = 0; i < datos.length; i++) {
            for (int j = 0; j < datos[i].length; j++) {
                if (!datos[i][j].getPrecio().equalsIgnoreCase("-")) {
                    total = total + Double.parseDouble(datos[i][j].getPrecio()) * datos[i][j].getCantidad();
                }
            }
        }
        
        return total;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel info2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcbMeto;
    private javax.swing.JCheckBox jckbDestino;
    private javax.swing.JCheckBox jckbPlanta;
    private javax.swing.JSpinner jspDestinos;
    private javax.swing.JSpinner jspOrigen;
    private javax.swing.JTable jtRestricciones;
    private javax.swing.JTable jtSolucion;
    private javax.swing.JLabel jtfResultado;
    // End of variables declaration//GEN-END:variables
}
